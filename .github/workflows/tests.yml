name: Image Auto Test

on:
  push:
    branches: [ "main", "feat/test-suite" ]
  pull_request:
    branches: [ "main" ]

jobs:

  core-test:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    # User test, we need at least one systemd
    # related process to prevent container stop
    # as the result, USE_SSH is assigned
    - name: Build image
      run: |
        OMS_MODE=br IMG_NAME=oms-core USE_SSH=yes USERNAME=meow \
        TZ=Asia/Tokyo LOCALE=zh_TW.UTF-8 ${{ github.workspace }}/run.sh
      
    - name: Test username
      run: docker exec oms-core runuser -l meow -c 'test $(whoami) = meow && echo Correct username'
    - name: Test existence of systemd
      run: docker exec oms-core systemctl
    - name: Check timezone
      run: |
        docker exec oms-core bash -c \
        'test $(timedatectl show | grep -E "Timezone=" | grep -E -o "[a-zA-Z]+\/[a-zA-Z]+" 2>/dev/null) = "Asia/Tokyo" && echo Correct timezone'
    - name: Check locale
      run: |
        docker exec oms-core bash -c \
        'test $(locale -a | grep -v C | grep -v POSIX | head -n 1) = zh_TW.UTF-8 && echo Correct locale'
    - name: Check hostname
      run: docker exec oms-core bash -c 'test $(hostnamectl) = oms-core && echo Correct hostname'


  ssh-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Build ssh image
      run: OMS_MODE=b IMG_NAME=oms-ssh USE_SSH=yes ${{ github.workspace }}/run.sh
    
    - name: Run ssh image without port expose
      run: OMS_MODE=r IMG_NAME=oms-ssh USE_SSH=yes ${{ github.workspace }}/run.sh
    - name: Test container status
      run: docker ps | grep oms-ssh

    - name: Test whether oms-ssh is built and run currectly
      run: docker exec oms-ssh runuser -u runner -- sudo systemctl status ssh || true
    - name: Try to start ssh
      run: docker exec oms-ssh runuser -u runner -- sudo systemctl start ssh
    - name: Check ssh
      run: docker exec oms-ssh runuser -u runner -- sudo systemctl status ssh

    - name: Run ssh image with port expose
      run: |
        OMS_MODE=r IMG_NAME=oms-ssh CONTAINER_NAME=oms-ssh-expose \
        USE_SSH=yes SSH_PORT=22222 ${{ github.workspace }}/run.sh
    - name: Test container status
      run: docker ps | grep oms-ssh-expose | grep '0.0.0.0:22222->22/tcp'


  gui-integrated:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Since the building process of novnc, vnc and gnome are so long
    # that we combine into a single test for shorter action runtime
    - name: Build GUI integrated image
      run: OMS_MODE=br IMG_NAME=oms-gui USE_NO_VNC=yes USE_GUI=yes ${{ github.workspace }}/run.sh
    
    # note: use novnc should automaticallt have vnc setup
    - name: Test whether oms-gui is built and run currectly
      run: docker exec oms-gui runuser -u runner -- sudo systemctl status tigervnc@:1 || true
    - name: Try to start tigervnc@:1
      run: docker exec oms-gui runuser -u runner -- sudo systemctl start tigervnc@:1
    - name: Check tigervnc@:1
      run: docker exec oms-gui runuser -u runner -- sudo systemctl status tigervnc@:1
      
    - name: Test whether oms-gui is built and run currectly
      run: docker exec oms-gui runuser -u runner -- sudo systemctl status gdm || true
    - name: Try to start gdm
      run: docker exec oms-gui runuser -u runner -- sudo systemctl start gdm
    - name: Check gdm
      run: docker exec oms-gui runuser -u runner -- sudo systemctl status gdm
      
    - name: Test whether oms-gui is built and run currectly
      run: docker exec oms-gui runuser -u runner -- sudo systemctl status novnc || true
    - name: Try to start novnc
      run: docker exec oms-gui runuser -u runner -- sudo systemctl start novnc
    - name: Check novnc
      run: docker exec oms-gui runuser -u runner -- sudo systemctl status novnc

    - name: Run vnc image with port expose
      run: |
        OMS_MODE=r IMG_NAME=oms-gui CONTAINER_NAME=oms-gui-expose-vnc \
        USE_VNC=yes VNC_PORT=9999 ${{ github.workspace }}/run.sh
    - name: Test container status
      run: docker ps | grep oms-gui-expose-vnc | grep '0.0.0.0:9999->5901/tcp'

    - name: Run novnc image with port expose
      run: |
        OMS_MODE=r IMG_NAME=oms-gui CONTAINER_NAME=oms-gui-expose-novnc \
        USE_NO_VNC=yes NO_VNC_PORT=9999 ${{ github.workspace }}/run.sh
    - name: Test container status
      run: docker ps | grep oms-gui-expose-novnc | grep '0.0.0.0:9999->6901/tcp'